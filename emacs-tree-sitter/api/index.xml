<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core APIs on Emacs Tree-sitter</title>
    <link>https://ubolonton.github.io/emacs-tree-sitter/api/</link>
    <description>Recent content in Core APIs on Emacs Tree-sitter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ubolonton.github.io/emacs-tree-sitter/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parsing</title>
      <link>https://ubolonton.github.io/emacs-tree-sitter/api/parsing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ubolonton.github.io/emacs-tree-sitter/api/parsing/</guid>
      <description>The minor mode tree-sitter-mode provides the high-level interface for working with an up-to-date buffer-local syntax tree. Writing a Dependent Minor Mode is recommended over directly using the low level parsing APIs below.
 Parsing is done through stateful parser objects.
 tsc-make-parser Create a new parser without setting a language. tsc-set-language parser language Set a parser&amp;rsquo;s active language. tsc-parse-string parser string Parse a single string of source code. This is useful for quick, one-off parsing needs.</description>
    </item>
    
    <item>
      <title>Inspecting</title>
      <link>https://ubolonton.github.io/emacs-tree-sitter/api/inspecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ubolonton.github.io/emacs-tree-sitter/api/inspecting/</guid>
      <description>The result of parsing is a syntax tree of the entire source code (string, buffer). It contains syntax nodes that indicate the structure of the source code. Tree-sitter provides APIs to inspect and traverse this structure, but does not support modifying it directly (for the purposes of source code transformation or generation).
 tsc-root-node tree Get the root node of a syntax tree. tsc-changed-ranges old-tree new-tree Compare an edited old syntax tree to a newly parsed one.</description>
    </item>
    
    <item>
      <title>Walking</title>
      <link>https://ubolonton.github.io/emacs-tree-sitter/api/walking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ubolonton.github.io/emacs-tree-sitter/api/walking/</guid>
      <description>Tree-walking functions enable efficient traversal of the syntax tree with the help of a stateful cursor object.
 tsc-make-cursor node-or-tree Create a new cursor on a node. The cursor cannot move out of this node. If called on a tree, the cursor is created on the tree&amp;rsquo;s root node. tsc-goto-parent cursor  tsc-goto-first-child cursor  tsc-goto-next-sibling cursor Attempt to move the cursor to the parent node, the first child node, or the next sibling node.</description>
    </item>
    
    <item>
      <title>Querying</title>
      <link>https://ubolonton.github.io/emacs-tree-sitter/api/querying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ubolonton.github.io/emacs-tree-sitter/api/querying/</guid>
      <description>Tree-sitter provides a Lisp-like query language to search for patterns in the syntax tree.
 tsc-make-query language patterns [tag-assigner] Create a new query for the given language. This query cannot be run on syntax nodes of other languages. Patterns can be specified as either a sequence (usually a vector, for convenience) of S-expressions, or their textual representations, concatenated into a string.
When the query is executed, each captured node is tagged with a symbol, whose name is the corresponding capture name defined in patterns.</description>
    </item>
    
  </channel>
</rss>